---
// SEO metadata component inspired by Astro's official site:
// https://github.com/withastro/astro.build/blob/main/src/components/SEO.astro

export type Image = {
  src: string;
  alt: string;
  width?: number;
  height?: number;
};

export type SEOMetadata = {
  name: string;
  title: string;
  description: string;
  image: Image;
  canonicalURL?: URL | string | null;
  locale?: string;
};

export type OpenGraph = Partial<SEOMetadata> & {
  type?: string;
};

export type Twitter = Partial<SEOMetadata> & {
  handle?: string;
  card?: "summary" | "summary_large_image";
};

export type Props = SEOMetadata & {
  og?: OpenGraph;
  twitter?: Twitter;
};

// Destructure props
const {
  name,
  title,
  description,
  image,
  locale = "en",
  canonicalURL = new URL(Astro.url.pathname, Astro.site),
} = Astro.props;

// Construct OpenGraph and Twitter metadata with fallbacks
const og = {
  name,
  title,
  description,
  canonicalURL,
  image,
  locale,
  type: "website",
  ...Astro.props.og,
} satisfies OpenGraph;

const twitter = {
  name,
  title,
  description,
  canonicalURL,
  image,
  locale,
  card: "summary_large_image",
  ...Astro.props.twitter,
} satisfies Twitter;

// Canonical URL formatting
function formatCanonicalURL(url: string | URL) {
  let path = url.toString();
  const hasQueryParams = path.includes("?");
  path = hasQueryParams ? path.replace(/\/?$/, "") : path.replace(/\/?$/, "/");
  return path;
}
---

{/* Canonical URL */}
{
  canonicalURL && (
    <link rel="canonical" href={formatCanonicalURL(canonicalURL)} />
  )
}

{/* Basic Meta */}
{description && <meta name="description" content={description} />}

{/* OpenGraph Tags */}
{og.title && <meta property="og:title" content={og.title} />}
{og.type && <meta property="og:type" content={og.type} />}
{
  og.canonicalURL && (
    <meta property="og:url" content={formatCanonicalURL(og.canonicalURL)} />
  )
}
{og.locale && <meta property="og:locale" content={og.locale} />}
{og.description && <meta property="og:description" content={og.description} />}
{og.name && <meta property="og:site_name" content={og.name} />}
{
  og.image && (
    <>
      <meta property="og:image" content={og.image.src} />
      <meta property="og:image:alt" content={og.image.alt} />
      {og.image.width && (
        <meta property="og:image:width" content={og.image.width.toString()} />
      )}
      {og.image.height && (
        <meta property="og:image:height" content={og.image.height.toString()} />
      )}
    </>
  )
}

{/* Twitter Tags */}
{twitter.card && <meta name="twitter:card" content={twitter.card} />}
{twitter.handle && <meta name="twitter:site" content={twitter.handle} />}
{twitter.title && <meta name="twitter:title" content={twitter.title} />}
{
  twitter.description && (
    <meta name="twitter:description" content={twitter.description} />
  )
}
{
  twitter.image && (
    <>
      <meta name="twitter:image" content={twitter.image.src} />
      <meta name="twitter:image:alt" content={twitter.image.alt} />
    </>
  )
}

{/* Robots Tag for Google Discover */}
<meta name="robots" content="max-image-preview:large" />
