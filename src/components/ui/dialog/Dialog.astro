---
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"div">;

const { class: className, ...rest } = Astro.props;
---

<div class:list={["dialog", className]} {...rest}>
	<slot />
</div>

<script>
	class DialogHandler {
		private trigger: HTMLButtonElement;
		private dialog: HTMLDialogElement;
		private closeButtons: NodeListOf<HTMLButtonElement>;
		private backdrop: HTMLElement;

		constructor(dialogWrapper: HTMLElement, dialogNumber: number) {
			this.dialog = dialogWrapper.querySelector("dialog") as HTMLDialogElement;
			this.backdrop = dialogWrapper.querySelector(
				".dialog-backdrop",
			) as HTMLElement;
			this.trigger = dialogWrapper.querySelector(
				".dialog-trigger",
			) as HTMLButtonElement;
			this.closeButtons = dialogWrapper.querySelectorAll(
				".dialog-close",
			) as NodeListOf<HTMLButtonElement>;

			if (!this.dialog || !this.trigger || !this.backdrop) return;

			this.setupAccessibility(dialogNumber);
			this.setupEvents();
		}

		private setupAccessibility(dialogNumber: number): void {
			const firstHeading = this.dialog.querySelector("h1, h2, h3, h4, h5, h6");
			if (firstHeading) {
				firstHeading.id = `dialog${dialogNumber}-heading`;
				this.dialog.setAttribute("aria-labelledby", firstHeading.id);
			}
			this.dialog.setAttribute("role", "dialog");
			this.dialog.setAttribute("aria-modal", "true");
		}

		private setupEvents(): void {
			this.trigger.addEventListener("click", () => this.open());
			this.closeButtons.forEach((button) =>
				button.addEventListener("click", () => this.close()),
			);

			this.backdrop.addEventListener("click", (e) => {
				if (e.target === this.backdrop) this.close();
			});

			this.dialog.addEventListener("keydown", (e: KeyboardEvent) => {
				if (e.key === "Escape") {
					e.preventDefault();
					this.close();
				}
			});
		}

		private open(): void {
			this.dialog.showModal();
			document.body.classList.add("overflow-hidden");
			this.backdrop.classList.remove("hidden");
			this.backdrop.dataset.state = "open";
			this.dialog.dataset.state = "open";

			const focusable = this.dialog.querySelector<HTMLElement>(
				'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
			);
			focusable?.focus();
		}

		private close(): void {
			document.body.classList.remove("overflow-hidden");
			this.dialog.dataset.state = "closed";
			this.backdrop.dataset.state = "closed";

			setTimeout(() => {
				this.backdrop.classList.add("hidden");
				this.dialog.close();
			});
		}
	}

	const setupDialogs = () => {
		document
			.querySelectorAll<HTMLElement>(".dialog")
			.forEach((wrapper, idx) => {
				new DialogHandler(wrapper, idx);
			});
	};

	document.addEventListener("DOMContentLoaded", setupDialogs);
</script>
